namespace DNN;

/// Int8 is deprecated, but int8_data in table Tensor is used, since a Tensor just stores value, not care about quantization method
enum DataType:byte { Float32, Int8, Int32, Float16, Bool8,
    QUANT8_ASYMM, QUANT8_SYMM, QUANT8_SYMM_PER_CHANNEL, 
    QUANT16_ASYMM, QUANT16_SYMM}
enum FuseCode:byte { None, Relu, Relu1, Relu6 }
enum LayerType:byte {
// Auto generated layer types start
    CONV_2D,
    AVERAGE_POOL_2D,
    MAX_POOL_2D,
    RELU,
    SOFTMAX,
    FULLY_CONNECTED,
    ADD,
    CONCATENATION,
    DEPTHWISE_CONV_2D,
    BATCH_TO_SPACE_ND,
    SPACE_TO_BATCH_ND,
    STRIDED_SLICE,
    MUL,
    DEQUANTIZE,
    LOCAL_RESPONSE_NORMALIZATION,
    TANH,
    FLOOR,
    LOGISTIC,
    PRELU,
    POW,
    NEG,
    MINIMUM,
    MAXIMUM,
    LOG,
// Auto generated layer types end
    }

table Tensor {
    data_type:DataType;
    int8_data: [uint8];
    float32_data: [float32];
    shape: [uint32];
    name: string;
    /// since flatbuffers doesn't have float16 data type, use uint16 instead
    float16_data: [uint16];
    bool8_data: [uint8];
    int32_data: [int32];
}

/// For weights, and for features
table QuantInfo {
    name: string;
    data_type: DataType;
    /// a float32 array of scales, the length will be 1 for non per-channel quantization, and be channelDim for per-channel quantization
    scales: [float32];
    zero_point: int32;
}

table Input {
    shape:[uint32];
    name:string;
}

// Auto generated tables start
table CONV_2D {
    input:string;
    weight:string;
    bias:string;
    padding_left:int;
    padding_right:int;
    padding_top:int;
    padding_bottom:int;
    stride_x:int;
    stride_y:int;
    fuse:FuseCode;
    output:string;
}

table AVERAGE_POOL_2D {
    input:string;
    padding_left:int;
    padding_right:int;
    padding_top:int;
    padding_bottom:int;
    stride_x:int;
    stride_y:int;
    kernel_width:int;
    kernel_height:int;
    fuse:FuseCode;
    output:string;
}

table MAX_POOL_2D {
    input:string;
    padding_left:int;
    padding_right:int;
    padding_top:int;
    padding_bottom:int;
    stride_x:int;
    stride_y:int;
    kernel_width:int;
    kernel_height:int;
    fuse:FuseCode;
    output:string;
}

table RELU {
    input:string;
    output:string;
}

table SOFTMAX {
    input:string;
    beta:float;
    output:string;
}

table FULLY_CONNECTED {
    input:string;
    weight:string;
    bias:string;
    fuse:FuseCode;
    output:string;
}

table ADD {
    input1:string;
    input2:string;
    fuse:FuseCode;
    output:string;
}

table CONCATENATION {
    inputs:[string];
    axis:int;
    output:string;
}

table DEPTHWISE_CONV_2D {
    input:string;
    weight:string;
    bias:string;
    padding_left:int;
    padding_right:int;
    padding_top:int;
    padding_bottom:int;
    stride_x:int;
    stride_y:int;
    depth_multiplier:int;
    fuse:FuseCode;
    output:string;
}

table BATCH_TO_SPACE_ND {
    input:string;
    block_sizes:[int];
    output:string;
}

table SPACE_TO_BATCH_ND {
    input:string;
    block_sizes:[int];
    pads:[int];
    output:string;
}

table STRIDED_SLICE {
    input:string;
    starts:[int];
    ends:[int];
    strides:[int];
    begin_mask:int;
    end_mask:int;
    shrink_axis_mask:int;
    output:string;
}

table MUL {
    input1:string;
    input2:string;
    fuse:FuseCode;
    output:string;
}

table DEQUANTIZE {
    input:string;
    output:string;
}

table LOCAL_RESPONSE_NORMALIZATION {
    input:string;
    radius:int;
    bias:float;
    alpha:float;
    beta:float;
    output:string;
}

table TANH {
    input:string;
    output:string;
}

table FLOOR {
    input:string;
    output:string;
}

table LOGISTIC {
    input:string;
    output:string;
}

table PRELU {
    input:string;
    alpha:string;
    output:string;
}

table POW {
    input:string;
    exp:string;
    output:string;
}

table NEG {
    input:string;
    output:string;
}

table MINIMUM {
    input1:string;
    input2:string;
    output:string;
}

table MAXIMUM {
    input1:string;
    input2:string;
    output:string;
}

table LOG {
    input:string;
    output:string;
}

// Auto generated tables end


table Layer {
    type:LayerType;
// Auto generated fields start
    CONV_2D_param:CONV_2D;
    AVERAGE_POOL_2D_param:AVERAGE_POOL_2D;
    MAX_POOL_2D_param:MAX_POOL_2D;
    RELU_param:RELU;
    SOFTMAX_param:SOFTMAX;
    FULLY_CONNECTED_param:FULLY_CONNECTED;
    ADD_param:ADD;
    CONCATENATION_param:CONCATENATION;
    DEPTHWISE_CONV_2D_param:DEPTHWISE_CONV_2D;
    BATCH_TO_SPACE_ND_param:BATCH_TO_SPACE_ND;
    SPACE_TO_BATCH_ND_param:SPACE_TO_BATCH_ND;
    STRIDED_SLICE_param:STRIDED_SLICE;
    MUL_param:MUL;
    DEQUANTIZE_param:DEQUANTIZE;
    LOCAL_RESPONSE_NORMALIZATION_param:LOCAL_RESPONSE_NORMALIZATION;
    TANH_param:TANH;
    FLOOR_param:FLOOR;
    LOGISTIC_param:LOGISTIC;
    PRELU_param:PRELU;
    POW_param:POW;
    NEG_param:NEG;
    MINIMUM_param:MINIMUM;
    MAXIMUM_param:MAXIMUM;
    LOG_param:LOG;
// Auto generated fields end
}

table Model {
    layers:[Layer];
    initializers:[Tensor];
    inputs:[Input];
    quant_infos:[QuantInfo];
    outputs:[string];
    version:uint32;
}

root_type Model;
