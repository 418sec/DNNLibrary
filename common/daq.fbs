namespace DNN;

/// Int8 is deprecated, but int8_data in table Tensor is used, since a Tensor just stores value, not care about quantization method
enum DataType:byte { Float32 = 0, Int8, Int32, Float16, Bool8,
    QUANT8_ASYMM, QUANT8_SYMM, QUANT8_SYMM_PER_CHANNEL, 
    QUANT16_ASYMM, QUANT16_SYMM}
enum FuseCode:byte { None = 0, Relu, Relu1, Relu6 }
enum LayerType:byte { Conv2D = 0, AvePool, MaxPool, Relu, Softmax, FC, Add, Concat,
    DepthwiseConv2D, BatchToSpace, SpaceToBatch, StridedSlice, Mul, AddScalar, MulScalar,
    Dequantize, LRN, Tanh, Floor, Logistic}

table Tensor {
    data_type:DataType;
    int8_data: [uint8];
    float32_data: [float32];
    shape: [uint32];
    name: string;
    /// since flatbuffers doesn't have float16 data type, use uint16 instead
    float16_data: [uint16];
    bool8_data: [uint8];
    int32_data: [int32];
}

/// For weights, and for features
table QuantInfo {
    name: string;
    data_type: DataType;
    /// a float32 array of scales, the length will be 1 for non per-channel quantization, and be channelDim for per-channel quantization
    scales: [float32];
    zero_point: int32;
}

table Input {
    shape:[uint32];
    name:string;
}

// Auto generated tables start
table Conv2D {
    input:string;
    weight:string;
    bias:string;
    pads:[int];
    strides:[int];
    fuse:FuseCode;
    output:string;
}

table AvePool {
    input:string;
    kernel_shape:[int];
    pads:[int];
    strides:[int];
    fuse:FuseCode;
    output:string;
}

table MaxPool {
    input:string;
    kernel_shape:[int];
    pads:[int];
    strides:[int];
    fuse:FuseCode;
    output:string;
}

table Relu {
    input:string;
    output:string;
}

table Softmax {
    input:string;
    output:string;
}

table FC {
    input:string;
    weight:string;
    bias:string;
    fuse:FuseCode;
    output:string;
}

table Add {
    input1:string;
    input2:string;
    fuse:FuseCode;
    output:string;
}

table Concat {
    inputs:[string];
    axis:int;
    output:string;
}

table DepthwiseConv2D {
    input:string;
    weight:string;
    bias:string;
    pads:[int];
    strides:[int];
    depth_multiplier:int;
    fuse:FuseCode;
    output:string;
}

table BatchToSpace {
    input:string;
    block_sizes:[int];
    output:string;
}

table SpaceToBatch {
    input:string;
    block_sizes:[int];
    pads:[int];
    output:string;
}

table StridedSlice {
    input:string;
    starts:[int];
    ends:[int];
    strides:[int];
    begin_mask:int;
    end_mask:int;
    shrink_axis_mask:int;
    output:string;
}

table Mul {
    input1:string;
    input2:string;
    fuse:FuseCode;
    output:string;
}

table AddScalar {
    input:string;
    scalar:float;
    fuse:FuseCode;
    output:string;
}

table MulScalar {
    input:string;
    scalar:float;
    fuse:FuseCode;
    output:string;
}

table Dequantize {
    input:string;
    output:string;
}

table LRN {
    input:string;
    radius:int;
    bias:float;
    alpha:float;
    beta:float;
    output:string;
}

table Tanh {
    input:string;
    output:string;
}

table Floor {
    input:string;
    output:string;
}

table Logistic {
    input:string;
    output:string;
}

table PReLU {
    input:string;
    alpha:string;
    output:string;
}

table Pow {
    input:string;
    exp:string;
    output:string;
}

table Neg {
    input:string;
    output:string;
}

table Minimum {
    input1:string;
    input2:string;
    output:string;
}

table Maximum {
    input1:string;
    input2:string;
    output:string;
}

table Log {
    input:string;
    output:string;
}

// Auto generated tables end


table Layer {
    type:LayerType;
// Auto generated fields start
    Conv2D_param:Conv2D;
    AvePool_param:AvePool;
    MaxPool_param:MaxPool;
    Relu_param:Relu;
    Softmax_param:Softmax;
    FC_param:FC;
    Add_param:Add;
    Concat_param:Concat;
    DepthwiseConv2D_param:DepthwiseConv2D;
    BatchToSpace_param:BatchToSpace;
    SpaceToBatch_param:SpaceToBatch;
    StridedSlice_param:StridedSlice;
    Mul_param:Mul;
    AddScalar_param:AddScalar;
    MulScalar_param:MulScalar;
    Dequantize_param:Dequantize;
    LRN_param:LRN;
    Tanh_param:Tanh;
    Floor_param:Floor;
    Logistic_param:Logistic;
    PReLU_param:PReLU;
    Pow_param:Pow;
    Neg_param:Neg;
    Minimum_param:Minimum;
    Maximum_param:Maximum;
    Log_param:Log;
// Auto generated fields end
}

table Model {
    layers:[Layer];
    initializers:[Tensor];
    inputs:[Input];
    quant_infos:[QuantInfo];
    outputs:[string];
}

root_type Model;
