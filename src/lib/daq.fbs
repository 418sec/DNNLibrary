namespace DNN;

enum DataType:byte { Float32 = 0, Int8 }
enum FuseCode:byte { None = 0, Relu, Relu1, Relu6 }
enum LayerType:byte { Conv2D = 0, AvePool, MaxPool, Relu, Softmax, FC, Add, Concat, DepthwiseConv2D }

table Tensor {
    data_type:DataType;
    int8_data: [uint8];
    float32_data: [float32];
    shape: [int];
    name: string;
}

table Input {
    shape:[int];
    name:string;
}

table Conv2D {
    input:string;
    weight:string;
    bias:string;
    pads:[int];
    strides:[int];
    fuse:FuseCode;
    output:string;
}

table DepthwiseConv2D {
    input:string;
    weight:string;
    bias:string;
    pads:[int];
    strides:[int];
    multiplier:int;
    fuse:FuseCode;
    output:string;
}

table AvePool {
    input:string;
    kernel_shape:[int];
    pads:[int];
    strides:[int];
    fuse:FuseCode;
    output:string;
}

table MaxPool {
    input:string;
    kernel_shape:[int];
    pads:[int];
    strides:[int];
    fuse:FuseCode;
    output:string;
}

table Relu {
    input:string;
    output:string;
}

table Softmax {
    input:string;
    output:string;
}

table FC {
    input:string;
    weight:string;
    bias:string;
    fuse:FuseCode;
    output:string;
}

table Add {
    input1:string;
    input2:string;
    fuse:FuseCode;
    output:string;
}

table Concat {
    inputs:[string];
    axis:int;
    output:string;
}

table Layer {
    type:LayerType;
    conv2d_param:Conv2D;
    avepool_param:AvePool;
    maxpool_param:MaxPool;
    relu_param:Relu;
    softmax_param:Softmax;
    fc_param:FC;
    add_param:Add;
    concat_param:Concat;
    depthwise_conv2d_param:DepthwiseConv2D;
}

table Model {
    layers:[Layer];
    initializers:[Tensor];
    inputs:[Input];
}

root_type Model;
